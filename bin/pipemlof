#!/usr/bin/env ksh

usage=$'[-1?1s1]
[+NAME?pipemlof - MLOF polarimetry pipeline.]
[+DESCRIPTION?\bpipemlof is used to process data from Mount Lemont Observatory Facility (MLOF).\b It performs the steps bad pixel correction, flat field
  correction, dark/bias removal, photometry of the stars, polarimetry of stars and serkowski law for input objects.]
[+?Since the the files from the observatory do not contain all the necessary keywords to be processed by \bpipemlof\b, the pipeline includes an initial
  step that will update the fits headers based on the file names. To see more details about the file name formats check \bgmlof --man\b. This pre-processing
  step will also group the data in a staging area according to the objects and filters. In addition, it will separate the ordinary and extraordinary
  beams in two separate fits files that will be in separate folders in the directory structure. Since the routines of the pipeline work mainly in a directory
  base, this will simplify manual reprocessing.]
[+?Given one or more input directories, this routine stage the data in the destination directory and perform all the steps up to the photometry
  for each of the filters found among the input data. Then, the data is staged again for the polarimetry calculation so ordinary and extraordinary
  data is grouped under the same tree. The polarization is calculated for each object and filter. Finally, the serkwoskii curve is fitted for
  each object considering all the filters of the input data.]
[r:recursive?Find recursively fits file under the input tree. If r is not used, fits files are search only one level under the input path.]
[g:group?Indicates if the data has to be grouped before starting processing. When \b-g\b is not set, the input directory must contain
  data that was previously staged in the format required by this routine. The \b-g\b option can be set more than one time in the same call of pipemlof
  when staging more than one directory together. However, files with the same name will be overwritten.]:[origin]
[o:object?Indicates a specific object to be reduced.]:[obj]
[w:filter?Indicates a specific filter to be reduced.]:[filt]
[f:force?Typically, the steps are not performed if the output directory for that step exists. \b-f\b indicates to force the processing
  from the \afstep\a step. That means that even if the data of the \afstep\a step exist, this and the following steps will be perform and the
  products overwritten. The values for \afstep\a are \bbadpix\b, \bbiasremove\b, \bflatfield\b, \bphotometry\b, \bpolgroup\b, \bpolarimetry\b]:[fstep]
[e:end?Indicates the step after which the pipeline stops. Values for \aestep\a are \bgroup\b, \bbadpix\b, \bflatfield\b, \bbiasremove\b,
  \bphotometry\b, \bgroupphot\b, \bpolarimetry\b and \bserkowski\b]:[estep]
[s:skip?Indicates the step to be skiped. Values for \aestep\a are \bbadpix\b, \bflatfield\b or \bbiasremove\b]:[sstep]
[b:bpmask?Input badpixel mask to be used to correct bad pixels. At least two files must be input, first for ordinary ray and second for extraordinary.
  If \b-b\b is set, the bad pixels will not be calculated from the input images.
  If \abpfile\a=bias the input bias are used to create the badpixel mask. If \b-b\b is not set, the input files are used to create the bad
  pixel mask.]:[bpfiles]
[i:interactive?Define interactive processes. Currently, only photometry can be interactive.]:[iprocess]
[t:trackpos?Used to keep track of previous star positions during photometry process. It indicates the size of the sub image where the star in the next fits file will be searched. It
  must be an integer higher than 10 to be set]#[track]
[d:debug?This option is used mainly for debugging. Typically, the routine calls idl and exit after the process is finished.
  This makes the idl routines hard to debug. By using the \b-d\b option the idl shell will stay when a routine crashes and the user will be able
  to inspect the values of the variables directly in the command line. The values for \adstep\a are \bbadpix\b, \bflatfield\b, \bbiasremove\b, \bphotometry\b, \bpolgroup\b, \bpolarimetry\b]:[dstep]
\nfiles detination directory1 directory2 directory3...\n
[+PROCESSING STEPS]{
  [+Bad pixel correction?]
  [+Bias subtraction?]
  [+Flat field correction?]
  [+Combination?]
  [+Photometry?]
  [+Polarimetry re-grouping?]
  [+Polarimetry?]
  [+Serkowski Law fitting?]}
[+EXIT VALUES]{
  [+0?Success.]
  [+1?Failure.]}
[+EXAMPLES]{ 
  [+pipemlof directory1? Process data in directory1. The hierarchy of directory1 must conform to the format required by this routine.]
  [+pipemlof destination directory1? Group data found in destination directory to directory1. Then, process the data in directory1.]
  [+pipemlof -r destination directory1? Group data found recursively in destination directory to directory1. Then, process the data in directory1.]
  [+pipemlof directory1? Calculate photometry and polarimetry of data in directory1. The hierarchy of directory1 must conform to the format required by this routine.]
  [+pipemlof -k level_1 destination directory1? Group data found in destination directory to directory1. Only data with \bOBJCLASS=level_1\b keyword
    is considered in the grouping. Then, process the data in directory1.]
  [+pipemlof -s mcharcos destination directory1? Group data found in destination directory to directory1. Only data whose path contains
    \bmcharcos\b is considered in the grouping. Then, process the data in directory1.]}
[+SEE ALSO? \bgmlof\b(1), \bdobadpix\b(1), \bdodark\b(1), \bdoflat\b(1), \bdophot\b(1), \bdocoadd\b(1), \bdopol\b(1) and \bendstep\b(1)]'

transferopt=""
origins=""
sstep=""
istep=""
dstep=""
track=""
while	getopts "$usage" option
do
  case "${option}"
  in
    r) rflag=1
        transferopt="$transferopt -r";;
    g) if [ -d "$OPTARG" ]; then 
        gflag=1
        origins="$origins $OPTARG"
       fi;;
    o) obj=$OPTARG;;
    w) filt=$OPTARG;;
    f) flagstep=$OPTARG;;
    e) estep=$OPTARG;;
    s) sstep="$sstep $OPTARG";;
    t) track=" -t $OPTARG ";;
    i) istep="$istep $OPTARG";;
    b) if [ -z "$obpfiles" ]; then obpfile=$OPTARG; else ebpfiles=$OPTARG; fi;;
    d)  dstep="$dstep $OPTARG"
        mflag=1
        transferopt="$transferopt -d";;
  esac
done
inputs=$@
shift $(( OPTIND-1 ))
ninput=$#

if [ $# -lt 1 ]; then
  echo "Usage: pipemlof [options] directory "
  exit 1
fi


###############################################################################
###############################################################################

####################################
# Some functions to simplify the code later
###

# Copy the data from the previous step and clear the step.* files
# and other defined in cleanskip
cpstep(){
  echo "Current directory: $(pwd)"
  echo "mkdir -p $objdir/$next/$hwp"
  mkdir -p $objdir/$next/$hwp
  echo "cp -r $objdir/$previous/$hwp/* $objdir/$next/$hwp"
  cp -r $objdir/$previous/$hwp/* $objdir/$next/$hwp
  if [ ! -z "$cleanskip" ]; then rm $(find $objdir/$next/$hwp -name $cleanskip); fi
  if [ ! -z "$(ls $objdir/$next/$hwp/step.*)" ]; then rm $objdir/$next/step.*; fi
}

# Given an object, a hwp and a filter and a ray, the routine runs a specific step
#   variables are: $object, $hwp, $filter, $ray, $previous, $next
#                  $sstep, $istep, $fstep, $dstep, $curopts
#                  $pipeline?, $cleanskip?
dostep(){
  
  if [ ! -z "$obj" ]; then
    if [ -z "$(echo "$obj" |grep -i $object)" ]; then
      echo "Object $object skipped per user request."
      echo "     ... requested objects are $obj"
      return
    fi
  fi
  if [ ! -z "$filt" ]; then
    if [ -z "$(echo "$filt" |grep -i $filter)" ]; then
      echo "Filter $filter skipped per user request."
      echo "     ... requested objects are $filt"
      return
    fi
  fi
  
  objdir=$destination/$ray/$filter/$object
  
  if [[ -d "$objdir/$next/$hwp"  && -z "$(echo "$fstep" | grep -i $next)" ]]; then
    echo "$next of $ray ray already exist for $object, $filter and $hwp"
    echo "$fstep"
    echo "Using same directory with current products"
  else
    # Remove the directory if it exist.
    # At this stage, we know that if exists, we forced it to be redone
    if [ -d "$objdir/$next/$hwp" ]; then rm -r $objdir/$next/$hwp; fi
    
    # Now there are two options, either the user requested to skip this step
    # or we have to create the new products and move them to the right place
    if [ ! -z "$(echo "$sstep" |grep -i $next)" ]; then
      # for the skipping option
      echo "Skipping $next step for $object, $filter and $hwp..."
      cpstep
      touch $objdir/$next/$hwp/step.skip
    else
      # for the processing option, we have two cases: it worked, or it didn't
      # In the second case we copy the data from the previous step and mark it as step.failed
      echo "Performing $next step of $object and $filter"
      $pipeline $curopts $objdir/$previous/$hwp
      
      # Now move the created products to the correct place in the directory structure
      if [ -d "$objdir/$previous/$hwp/$next" ]; then
        mkdir -p $objdir/$next/$hwp
        mv $objdir/$previous/$hwp/$next/* $objdir/$next/$hwp
        rm -r $objdir/$previous/$hwp/$next
        if [ ! -z "$(ls $objdir/$next/$hwp/step.*)" ]; then rm $objdir/$next/step.*; fi
        touch $objdir/$next/$hwp/step.success
      else
        echo "$next step failed for $object, $filter and $hwp..."
        cpstep
        touch $objdir/$next/$hwp/step.failed
      fi
    fi
  fi
}

# This routine will call dostep for all objects, fitlers and hwp
# The input should be a list of directories to the objects
# Then, it will move the directories to the correct place with the step is done
# for all the objects
allsteps(){
  
  # Check what arguments we will need for this specific step (interactive, debug)
  if [ ! -z "$(echo "$dstep" |grep -i $next)" ]; then
    curopts="-d $curopts"
  fi
  if [ ! -z "$(echo "$istep" |grep -i $next)" ]; then
    curopts="-i $curopts"
  fi
  
  list=$@
  for dir in $list
  do
    hwp=$(basename $dir)
    object=$(basename $(dirname $(dirname $dir)))
    filter=$(basename $(dirname $(dirname $(dirname $dir))))
    ray=$(basename $(dirname $(dirname $(dirname $(dirname $dir)))))
    
    echo "Performing step for $hwp, $object, $filter and $ray"
    dostep
  done
  
}

###############################################################################
###############################################################################
# ASSUMPTIONS: 
# For each origin directory group the data as follow
# destination/stage/
#   rot0/
#       ordinary/
#           filter1/
#              object1/
#                 hwp1/
#                 hwp2/
#                 hwp3/
#                 ....
#              object2/
#              ...
#              flat/
#           filter2/
#           ...
#           dark/
#       extraordinary/
#           filter1/
#           filter2/
#           ....
#           dark/
#   rot90cw/
#       ordinary/
#           filter1/
#           ....
#
#
# This will happen automatically after grouping if grouping is called
#
#


#####################
#  VARIABLE INIT
#####################
# if the bad pixel mask of the ordinary was set but not the one for the extraordinary
# we exit and tell the user
if [[ ! -z "$obpfile" && -z "$ebpfile" ]]; then
  if [[ "$obpfile" == "bias" ]]; then
    ebpfile="bias"
  else
    echo "You must input the bad pixel mask for the ordinary and the extraordinary"
    echo "However, you only input the one for the ordinary: $obpfile"
    echo "Try: pipemlof -e bpfile_ordinary -e bpfile_extraordinary stage_directory"
    echo "  or pipemlof -e bias stage_directory"
    exit
  fi
fi
if [[ ! -z "$obpfile" && ! -z "$ebpfile" ]]; then
  if [[ ! -f "$obpfile" || ! -f "$ebpfile" ]]; then
    echo "The bad pixel mask of the ordinary or the extraordinary beams are not valid."
    exit
  fi
fi

destination=$1

if [ ! -z "$estep" ]; then
    validstep="group badpix biasremove flatfield photometry polgroup polarimetry"
    if [ -z $(echo $validstep |grep $estep) ]; then
        echo "The step $estep does not exist"
        echo "Select one of the following or don't use -e option"
        echo "      $validstep"
        exit 1
    fi
else
  estep='supercalifragilisticoespialidoso'
fi

if [ ! -z "$flagstep" ]; then
  case "$flagstep"
  in
    badpix) fstep="badpix biasremove flatfield photometry grouphot polarimetry serkowski"
            fflatfield=1
            fphotometry=1
            fgroupphot=1
            fpolarimetry=1
            fserkowski=1;;
    biasremove)   fstep="biasremove flatfield photometry grouphot polarimetry serkowski"
                  fflatfield=1
                  fphotometry=1
                  fgroupphot=1
                  fpolarimetry=1
                  fserkowski=1;;
    flatfield)  fstep="flatfield photometry grouphot polarimetry serkowski"
                fflatfield=1
                fphotometry=1
                fgroupphot=1
                fpolarimetry=1
                fserkowski=1;;
    photometry) fstep="photometry grouphot polarimetry serkowski"
                fphotometry=1
                fgroupphot=1
                fpolarimetry=1
                fserkowski=1;;
    groupphot)  fstep="grouphot polarimetry serkowski"
                fgroupphot=1
                fpolarimetry=1
                fserkowski=1;;
    polarimetry)    fstep="polarimetry serkowski"
                    fpolarimetry=1
                    fserkowski=1;;
    serkowski)  fstep="serkowski"
                fserkowski=1;;
  esac
fi


#####################
#  DATA GROUPING
#####################
curopts="$transferopt"
if [ ! -z "$(echo "$dstep" |grep -i group)" ]; then
  curopts="$curopts -d"
fi
if [ ! -z "$(echo "$istep" |grep -i group)" ]; then
  curopts="$curopts -i"
fi

if [ ! -z "$gflag" ]; then
    echo "Requested grouping data mode"
    if [ -d "$destination/stage" ]; then
      echo "Staging area already exist: $destination/stage"
      if [ ! -z "$(ls $destination/stage/*)" ]; then
        echo "Staging area must be empty. Select another location"
        echo "Pipeline Aborted!!"
        exit 1
      fi
    fi
    gmlof -ft $curopts $destination $origins
    destination="$destination/stage/rot0"
fi

if [ $? -ne 0 ]; then
    echo "Grouping failed (status $?)"
    echo "Aborting"
    exit $?
fi

echo "STAGE AREA: $destination"

if [[ ! -d "$destination" || ! -d "$destination/ordinary" || ! -d "$destination/extraordinary" ]]; then
  if [[ ! -d "$destination" ]]; then echo "Staging area $destination does not exist"; fi
  if [[ ! -d "$destination/ordinary" ]]; then echo "Staging area $destination does not contains ordinary tree"; fi
  if [[ ! -d "$destination/extraordinary" ]]; then echo "Staging area $destination does not contains extraordinary tree"; fi
  echo "Did you mean: pipemlof -g $origins $inputs ?"
  echo "   or may be: pipemlof $inputs/stage ?"
  exit 1
fi

if [ ! -z $(echo "group" |grep $estep) ]; then
    echo "Pipeline stopped at $estep per user request"
    exit 0
fi   


###############################################################################
###############################################################################
# Set some variables to be used along the code

filterord=$(ls -d $destination/ordinary/* | grep -v "bias")
filterext=$(ls -d $destination/extraordinary/* | grep -v "bias")
objord=$(ls -d $destination/ordinary/*/* | grep -v "flat" | grep -v "dark")
objext=$(ls -d $destination/extraordinary/*/* | grep -v "flat" | grep -v "dark")

hwpord=$(ls -d $destination/ordinary/*/*/raw/* | grep -v "flat" | grep -v "dark")
hwpext=$(ls -d $destination/extraordinary/*/*/raw/* | grep -v "flat" | grep -v "dark")

darkord=$(ls -d $destination/ordinary/* | grep "bias\|dark")
darkext=$(ls -d $destination/extraordinary/* | grep "bias\|dark")

next=raw

###############################################################################
###############################################################################

# this is just used for thesting purposes only of the instpol part
if [ 1 -eq 1 ]; then 
#####################
#  REMOVE BAD PIXELS
#####################
echo ":::::::::::::::::::::::::::::::::::::"
echo ":::::::: BAD PIXEL REMOVAL    :::::::"
echo ":::::::::::::::::::::::::::::::::::::"
previous=$next
next=badpix
pipeline=dobadpix
if [[ ! -z "$obpfile" && -f "$obpfile" ]]; then
  curopts="-b $obpfile"
else
  if [[ "$obpfile" == "bias" ]]; then
    curopts="$darkord"
  else
    curopts=""
  fi
fi
curopts="-ra $curopts"
allsteps $hwpord
if [[ ! -z "$ebpfile" && -f "$ebpfile" ]]; then
  curopts="-b $ebpfile"
else
  if [[ "$ebpfile" == "bias" ]]; then
    curopts="$darkext"
  else
    curopts=""
  fi
fi
curopts="-ra $curopts"
allsteps $hwpext
  
if [ ! -z $(echo "badpix" |grep $estep) ];then
    echo "Pipeline stopped at $estep per user request"
    exit 0
fi
    
###############
#  REMOVE BIAS
###############
echo ":::::::::::::::::::::::::::::::::::::"
echo ":::::::::: BIAS REMOVAL    ::::::::::"
echo ":::::::::::::::::::::::::::::::::::::"
previous=$next
next=biasremove
pipeline=dodark
curopts="-ra $darkord"
allsteps $hwpord
curopts="-ra $darkext"
allsteps $hwpext

if [ ! -z $(echo "biasremove" |grep $estep) ];then
    echo "Pipeline stopped at $estep per user request"
    exit 0
fi

    
###############
#  REMOVE FLAT
###############
echo "::::::::::::::::::::::::::::::::::::::::::"
echo ":::::::::: FLATFIELD REMOVAL    ::::::::::"
echo "::::::::::::::::::::::::::::::::::::::::::"

previous=$next
next=flatfield

curopts="-e 1.0"
if [ ! -z "$(echo "$dstep" |grep -i flatfield)" ]; then
  curopts="$curopts -d"
fi
if [ ! -z "$(echo "$istep" |grep -i flatfield)" ]; then
  curopts="$curopts -i"
fi

dostepflat(){
  for object in $curobjectray
  do
    dothisobj=1
    if [ ! -z "$obj" ]; then
      if [ -z "$(echo "$obj" |grep -i $(basename $object))" ]; then
        echo "Object $(basename $object) skipped per user request."
        echo "     ... requested objects are $obj"
        dothisobj=0
      fi
    fi
    if [ $dothisobj -eq 1 ]; then
      if [[ -d "$object/$next"  && -z "$fflatfield" ]]; then
          echo "Flat field correction of ray already exist at $object."
          echo "Using same directory with current products."
      else
        if [ -d "$object/$next" ]; then rm -r $object/$next; fi
        if [ ! -z "$(echo "$sstep" |grep -i flat)" ]; then
          echo "Skipping flatfield correction step for $object..."
          mkdir -p $object/$next
          cp -r $object/$previous/* $object/$next
          if [ ! -z "$(ls $object/$next/step.*)" ]; then rm $object/$next/step.*; fi
          touch $object/$next/step.skip
        else
          # Check the filter of the object. I know, it is not the most optimal
          # but the quickest fix
          filtobj=$(dirname $object)
          filter=$(basename $filtobj)
          dothisfilter=1
          
          if [ ! -z "$filt" ]; then
            if [ -z "$(echo "$filt" |grep -i $filter)" ]; then
              echo "Filter $filter skipped per user request."
              echo "     ... requested objects are $filt"
              dothisfilter=0
            fi
          fi
          
          if [ $dothisfilter -eq 1 ]; then
            if [ -d "$filtobj/flat" ]; then 
                # Check the hwp for the object and find the flat for that hwp
                hwpobjlist=$(basename $(ls -d $object/$previous/* | grep -v "step."))
                for hwpobj in $hwpobjlist
                do
                  if [ -d "$filtobj/flat/raw/$hwpobj" ]; then
                      echo "Flatfield correction of data at $object/$hwpobj"
                      echo "doflat $curopts -ra $object/$previous/$hwpobj $filtobj/flat/raw/$hwpobj"
                      doflat $curopts -ra "$object/$previous/$hwpobj" "$filtobj/flat/raw/$hwpobj"
                  else
                      echo "No flat for filter $(basename $filtobj) and hwp $hwpobj"
                  fi
                done
            else
                echo "No flat for filter $(basename $filtobj)"
            fi
          fi
        fi
      fi
    fi
  done
  
  # Order the directory structure
  if [ -z "$(echo "$sstep" |grep -i flat)" ]; then
    echo "Moving directories..."
    for filter in $curfilterray
    do
        echo "    .... filter $filter"
        endstep $filter $previous $next
    done
  fi

}

# Ordinary ray
curobjectray=$objord
curfilterray=$filterord
dostepflat

# Extraordinary ray
curobjectray=$objext
curfilterray=$filterext
dostepflat


if [ ! -z $(echo "flatfield" |grep $estep) ];then
    echo "Pipeline stopped at $estep per user request"
    exit 0
fi

###############################################################################
###############################################################################
# Measure the photometry of the stars
previous=$next
next=photometry

dostepphot(){
  for object in $curobjectray
  do
      if [[ -d "$object/$next"  && -z "$fphotometry" ]]; then
          echo "Photometry of ray already exist at $object."
          echo "Doing photometry in same directory with current star positions."
          # Modify dophot to stay in same directory
          # domlofphot -r "$object/$next" with option same directory
      else
          echo "Measure photometry of data at $object"
          if [ -z "$(echo "$istep" |grep -i phot)" ]; then
            domlofphot $track -q BAD -r "$object/$previous"
          else
            domlofphot $track -q BAD -ir "$object/$previous"
          fi
      fi
  done
  for filter in $curfilterray
  do
      endstep $filter $previous $next
  done
}

# Ordinary ray
curobjectray=$objord
curfilterray=$filterord
dostepflat

# Extraordinary ray
curobjectray=$objext
curfilterray=$filterext
dostepflat


if [ ! -z $(echo "photometry" |grep $estep) ];then
    echo "Pipeline stopped at $estep per user request"
    exit 0
fi

                                        ###############################################################################
                                        ###############################################################################
                                        # Combine the files for each object and hwp
                                        # For now I skip it and average the photometry for all the star exposures later
                                        if [ ! -z "$photflag" ]; then
                                            previous=$next
                                            next=coadd
                                            hwplist=$(ls -d $destination/ordinary/*/*/$previous/*)
                                            for hwp in $hwplist
                                            do
                                                echo "Coadding files at $hwp"
                                                docoadd -r "$hwp"
                                                endstep $hwp $previous $next
                                                domlofphot -r $hwp/$next
                                                mv $previous "$previous-x"
                                                endstep $hwp $next $previous
                                            done
                                            # Remove dark for each filter and ray of extaordinary section
                                            filterlist=$(ls "$destination/extraordinary")
                                            for filter in $filterlist
                                            do
                                                echo "Coadding files at $hwp"
                                                docoadd -r "$hwp"
                                                endstep $hwp $previous $next
                                                domlofphot -r $hwp/$next
                                                mv $previous "$previous-x"
                                                endstep $hwp $next $previous
                                            done
                                            next=$previous
                                        fi

###############################################################################
###############################################################################
# Re-engineer the directory structure for polarimetry
previous=$next
next=polarimetry

# Create a new directory for staging the new tree
destpol=$destination/polarimetry

raylist="ordinary extraordinary"
for ray in $raylist
do
    photlistord=$(ls -d $destination/$ray/*/*/$previous/* |grep -v "step.")
    
    for photord in $photlistord
    do
        hwp=$(basename $photord)
        object=$(basename $(dirname $(dirname $photord)))
        filter=$(basename $(dirname $(dirname $(dirname $photord))))
        echo "Copying $previous object=$object, filter=$filter, hwp=$hwp for $ray ray"
        tmpdestpol="$destpol/$object/$filter/$previous/$hwp/$ray"
        if [ -d "$tmpdestpol" ]; then
            echo "Skipping because data already exist in destination"
        else
            if [ "$(ls -A $photord)" ]; then
                mkdir -p $tmpdestpol
                cp -r $photord/* $tmpdestpol
                echo "   $photord/* >>>> $tmpdestpol"
            else
                echo "Origin does not contain data: $photord"
            fi
        fi
    done
done

if [ ! -z $(echo "polgroup" |grep $estep) ];then
    echo "Pipeline stopped at $estep per user request"
    exit 0
fi

###############################################################################
###############################################################################
# Measure the polarimetry of the stars
photlist=$(ls -d $destpol/*/*/photometry)

echo ""
echo $destpol
echo "...."


curopts=""
if [ ! -z "$(echo "$dstep" |grep -i pol)" ]; then
  curopts="$curopts -d"
fi
if [ ! -z "$(echo "$istep" |grep -i pol)" ]; then
  curopts="$curopts -i"
fi

for phot in $photlist
do
  
  dothiphotlist=1
  object=$(basename $(dirname $(dirname $phot)))
  filter=$(basename $(dirname $phot))
  if [ ! -z "$obj" ]; then
    if [ -z "$(echo "$obj" |grep -i $object)" ]; then
      echo "Object $object skipped per user request."
      echo "     ... requested objects are $obj"
      dothiphotlist=0
    fi
  fi
  if [ ! -z "$filt" ]; then
    if [ -z "$(echo "$filt" |grep -i $filter)" ]; then
      echo "Filter $filter skipped per user request."
      echo "     ... requested objects are $filt"
      dothiphotlist=0
    fi
  fi
  
  if [ $dothiphotlist -eq 1 ]; then
    if [[ -d "$(dirname $phot)/polarimetry"  && -z "$fpolarimetry" ]]; then
      echo "Polarimetry of $object already exist for $filter filter."
    else
      echo "Measure polarimetry from $previous of data at $phot"
      if [ -d "$(dirname $phot)/polarimetry" ]; then rm -r $(dirname $phot)/polarimetry; fi
      dopol $curopts -r "$phot"
        
      list2bemoved=$(find $phot -name polarimetry)
      if [ ! -z "$list2bemoved" ]; then
        for cdir in $list2bemoved
        do
          mv $cdir $(dirname $phot)
          if [ ! -z "$(ls $(dirname $phot)/polarimetry/step.*)" ]; then rm $(dirname $phot)/polarimetry/step.*; fi
          touch $(dirname $phot)/polarimetry/step.success
        done
      else
        mkdir -p $(dirname $phot)/polarimetry
        touch $(dirname $phot)/polarimetry/step.failed
      fi
    fi
  fi
done

if [ ! -z $(echo "polarimetry" |grep $estep) ];then
    echo "Pipeline stopped at $estep per user request"
    exit 0
fi

# this fi correspond to the end of the statement I did to test serkowski 1 -eq 2
else
  destpol=$destination/polarimetry
fi


###############################################################################
###############################################################################
# Instrumental polarization calibration
pollist=$(ls -d $destpol/*)

echo ""
curopts=""
if [ ! -z "$(echo "$dstep" |grep -i instpol)" ]; then
  curopts="$curopts -d"
fi
if [ ! -z "$(echo "$istep" |grep -i instpol)" ]; then
  curopts="$curopts -i"
fi


echo "doinstpol $curopts -ra $(ls -d $destpol/*/b/polarimetry)"
doinstpol $curopts -ra $(ls -d $destpol/*/b/polarimetry)
echo "doinstpol $curopts -ra $(ls -d $destpol/*/v/polarimetry)"
doinstpol $curopts -ra $(ls -d $destpol/*/v/polarimetry)
echo "doinstpol $curopts -ra $(ls -d $destpol/*/r/polarimetry)"
doinstpol $curopts -ra $(ls -d $destpol/*/r/polarimetry)
echo "doinstpol $curopts -ra $(ls -d $destpol/*/i/polarimetry)"
doinstpol $curopts -ra $(ls -d $destpol/*/i/polarimetry)

echo ""
echo ""
for pol in $pollist
do  
  mvdirs=$(ls -d $pol/*/polarimetry/instpol)
  for ip in $mvdirs
  do
    echo "mv $ip $(dirname $(dirname $ip))"
    mv $ip $(dirname $(dirname $ip))
  done
done

###############################################################################
###############################################################################
# Fit Serkowski law for each the stars
# Re-engineer the directory structure for polarimetry
pollist=$(ls -d $destpol/*)

echo ""
curopts=""
if [ ! -z "$(echo "$dstep" |grep -i serkowski)" ]; then
  curopts="$curopts -d"
fi
if [ ! -z "$(echo "$istep" |grep -i serkowski)" ]; then
  curopts="$curopts -i"
fi

for pol in $pollist
do
  if [[ -d "$pol/serkowski"  && -z "$fserkowski" ]]; then
    echo "Serkowski law of $(basename $pol) already exists"
  else
    echo "Measuring Serkowski law for $pol"
    doserkowski $curopts -ra $(find $pol -name instpol)
    list2bemoved=$(find $pol -name serkowski)
    if [ ! -z "$list2bemoved" ]; then
      for cdir in $list2bemoved
      do
        if [[ "$cdir" != "$pol/serkowski" ]]; then 
          mv $cdir $pol
          touch $pol/serkowski/step.success
        fi
      done
    else
      mkdir -p $pol/serkowski
      touch $pol/serkowski/step.failed
    fi
  fi
done



exit $?
